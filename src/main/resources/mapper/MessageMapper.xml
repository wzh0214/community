<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wzh.community.mapper.MessageMapper"><!--和mapper接口全类名一致-->
    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <!-- List<Message> selectConversations(int userId, int offset, int limit);-->
    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select Max(id) from message
            where (from_id = #{userId} or to_id = #{userId})
            and `status` != 2
            and from_id != 1
            group by conversation_id
        )
        order by id desc
        limit  #{offset},#{limit}
    </select>

    <!--int selectConversationCount(int userId);-->
    <select id="selectConversationCount" resultType="_int">
        select count( DISTINCT conversation_id)
        FROM message
        where `status`!=2 and from_id!=1 AND (from_id=#{userId} or to_id=#{userId})
    </select>

    <!--List<Message> selectLetters(String conversationId, int offset, int limit);-->
    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where `status`!=2 and from_id!=1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}

    </select>


    <!--int selectLetterCount(String conversationId);-->
    <select id="selectLetterCount" resultType="_int">
        select count(id)
        from message
        where `status`!=2 and from_id!=1
        and conversation_id = #{conversation_id}
    </select>

    <!--int selectLetterUnreaderCount(int userId, String conversationId);-->
    <select id="selectLetterUnreaderCount" resultType="_int">
        select count(id)
        from message
        where `status` = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <!--int insertMessage(Message message);  keyProperty="id"是插入后通过自增主键的id值返回给属性值-->
    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <!--int updateStatus(List<Integer> ids, int status);-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id"  open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectLastNotice" resultType="message">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>

    <select id="selectNoticeCount" resultType="_int">
        select count(id)
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

    <select id="selectNoticeUnreadCount" resultType="_int">
        select count(id)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

    <select id="selectNotices" resultType="message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>
</mapper>